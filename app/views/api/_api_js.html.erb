<script type="text/javascript">

/*jslint browser: true */
/*global G_vmlCanvasManager, $ */

var Api = (function () {

    "use strict";

	var api_read_server = '<%= Rails.configuration.api_read_server %>',
		api_write_server = '<%= Rails.configuration.api_write_server %>',
		error_msg = null,
		active = false,
		timer = null,
		state = null,
		auth_token = null,
		form_auth_token = null,

		// jQuery on an empty object, we are going to use this as our queue
		ajaxQueue = new Queue(),

		initialized = false,

		init = function() {
			//console.log('API Initialized');
			if(!Api.initialized) {
				Api.reset_queue_timer();
				Api.initialized = true;
				Api.fetch_user_details();
			}
		},
 
		reset_queue_timer = function() {
			if(timer != undefined && timer != null) {
				// console.log('Clearing Timer [['+timer+']]');
				clearInterval(timer);
			}
			Api.scan_queue();
			timer = setInterval(function() { Api.scan_queue(); }, 5000);
		},

		scan_queue = function() {
			// console.info('Scanning ajax queue');
			if(!Api.active) {
				// console.info('   Check for work');
				if( Api.ajaxQueue.peek() != undefined ) {
					//console.info('   Work to do');
					Api.active = true;
       				var r = Api.ajaxQueue.dequeue();
					Api.exec_request(r.uri, r.call_type, r.params, r.success_cb);
				} else {
					// console.log('API::No work to do');
				}
			}
		},


	fetch_user_details = function() {
		console.log('API -- fetching user details');
		state = 'fetch_user_details';
		submit_request( Api.api_read_server + '/api/user_details.json',
			'GET',
      		{},
			function(d) { 
				if(d && d.user && d.user.party_affiliation) {
					if(d.user.party_affiliation.localeCompare('neither') == 0) {
						$('#partyNeither').prop('checked', true);
						//console.log('API:: NEITHER');
					} else
					if(d.user.party_affiliation.localeCompare('democrat') == 0) {
						$('#partyDemocrat').prop('checked', true);
						//console.log('API:: DEMOCRAT ' + d.user.party_affiliation);
					} else
					if(d.user.party_affiliation.localeCompare('republican') == 0) {
						$('#partyRepublican').prop('checked', true);
						//console.log('API:: REPUBLICAN');
					}
					if(d.user.party_affiliation.localeCompare('no_vote') == 0) {
						$('#partyNoVote').prop('checked', true);
						//console.log('API:: NoVote');
					}
				}

				console.log('API:: fetch_user_details return '+d);
			});
	},

	set_party = function(party) {
		console.log('API -- setting user party');
		state = 'set_party';

		var params = {
			'party': party
		};

		submit_request( Api.api_write_server + '/api/user_party.json',
			'POST',
      		params,
			function(d) { 
				console.log('API:: SET PARTY return ');
			});
	},

	reset_zipcode = function() {
		console.log('API -- setting user zipcode');
		state = 'reset_zipcode';

		var params = {
		};

		submit_request( Api.api_write_server + '/api/user_zipcode_reset.json',
			'POST',
      		params,
			function(d) { 
				console.log('API:: RESET ZIPCODE return ');
				$('#zipcode_field').prop('placeholder', '<%= t(:EnterZipcode) %>');
				$('#zipcode_field').val('');
				$('#zipcode_place_content').text('');
				$('#zipcode_field_button').text('<%= t(:AddMyZipcode) %>');
				$('#zipcode_place').hide();
			});
	},

	set_zipcode = function(zip, place_name, state_abbreviation) {
		console.log('API -- setting user zipcode');
		state = 'set_zipcode';

		var params = {
			'zipcode': zip,
			'place_name': place_name,
			'state_abbreviation': state_abbreviation
		};

		submit_request( Api.api_write_server + '/api/user_zipcode.json',
			'POST',
      		params,
			function(d) { 
				console.log('API:: SET ZIPCODE return ');
			});
	},

	submit_request = function( uri, call_type, params, success_cb ) {
		Api.ajaxQueue.enqueue( {
			uri: uri,
			call_type: call_type,
			params: params,
			success_cb: success_cb
		});
		Api.scan_queue();
	},

	exec_request = function( uri, call_type, params, success_cb ) {
		if(!Api.active) {
			console.log('API Inactive due to error');
			return;
		}
		$.ajax({
	    	data: params,
	    	timeout: 15000,
	    	dataType: 'json',
			cache: false,
			type: call_type,
			url: uri,
	    	statusCode: {
    			401: function() { Api.error_msg = '<%= t(:CommNotAuthorized) %>'; Api.active = false; console.error(Api.error_msg); Api.report_error(Api.error_msg); },
    			402: function() { Api.error_msg = '<%= t(:CommNotAuthorized) %>'; Api.active = false; console.error(Api.error_msg); Api.report_error(Api.error_msg); },
    			403: function() { Api.error_msg = '<%= t(:CommForbidden) %>'; Api.active = false; console.error(Api.error_msg); Api.report_error(Api.error_msg); },
    			404: function() { Api.error_msg = '<%= t(:CommPageNotFound) %>'; Api.active = false; console.error(Api.error_msg); Api.report_error(Api.error_msg); },
    			500: function() { Api.error_msg = '<%= t(:CommInternalServerError) %>'; Api.active = false; console.error(Api.error_msg); Api.report_error(Api.error_msg); }
	    	}
        }).success(function(data) {
			if( data.status != true ) {
				Api.error_msg = data.flash;
				console.error(Api.error_msg);
				Api.active = false;
			} else {
				success_cb.call(this, data.data);
				Api.active = false;
				if(state == 'set_party') {
					Api.fetch_user_details();
				} 
			}
        }).error(function(xhr,status,err) {
	        Api.error_msg = '<%= t(:CommError) %> '+status +'::'+err;
			console.error(Api.error_msg);
			Api.active = false;
			if(state == 'set_zipcode') {
				$('#zipcode_field').prop('placeholder', '<%= t(:CouldNotStoreZipcode) %>');
				$('#zipcode_field').val('');
				$('#zipcode_place_content').text('');
				$('#zipcode_place').hide();
				$('#zipcode_field_button').text('<%= t(:AddMyZipcode) %>');
			} 
			if(state == 'reset_zipcode') {
				$('#zipcode_field').prop('placeholder', '<%= t(:CouldNotDeleteZipcode) %>');
				$('#zipcode_field').val('');
				$('#zipcode_place').show();
				$('#zipcode_field_button').text('<%= t(:AddMyZipcode) %>');
			} 
	  });
	},

	errMsg = function() {
		return(Api.error_msg);
	},

	isError = function() {
		return(((Api.error_msg == null) ? false : true));
	},

	isActive = function() {
		return(Api.active);
	},

	report_error = function(msg) {
		$('#api_alert_box_content').html(msg);
		$('#api_alert_box').show();
	};

    return {
		init: init,
		initialized: initialized,
		auth_token: auth_token,
		form_auth_token: form_auth_token,
		fetch_user_details: fetch_user_details,
		set_party: set_party,
		set_zipcode: set_zipcode,
		reset_zipcode: reset_zipcode,
		isError: isError,
		isActive: isActive,
		active: active,
		errMsg: errMsg,
		ajaxQueue: ajaxQueue,
		scan_queue: scan_queue,
		reset_queue_timer: reset_queue_timer,
		submit_request: submit_request,
		exec_request: exec_request,
		api_read_server: api_read_server,
		api_write_server: api_write_server,
		error_msg: error_msg,
		report_error: report_error,
    };

}());

$(document).ready(function() {
	console.log("API::::: READY :::::: Initialized "+Api.initialized);
	Api.init();
	console.log("API::::: READY :::::: Initialized "+Api.initialized);
	Api.form_auth_token = $('input[name="authenticity_token"]').attr('value');
});
</script>
